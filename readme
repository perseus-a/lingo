= Lingo - Linguistisches Lego
Lingo ist ein freies Indexierungssystem für Forschung und Lehre. 
Die wesentlichen Funktionen von Lingo sind
* Grundformidentifizierung bzw. -reduzierung mitttels einfacher Suffixliste
* algorythmische Kompositumzerlegung
* lexikalische wörterbuchbasierte Relationierung und Mehrworterkennung
* generische Mehrwort bzw. Sequenzerkennung auf Basis von Wortklassenfolgen
	
= Credits
Lingo ist eine gemeinschaftliche Entwicklung von Klaus Lepsky und John Vorhauer.


== Einführung
Lingo ist linguistisches Lego. Sollen Texte einer linguistischen Analyse unterzogen werden, 
so kann man mit Lingo alles bewerkstelligen, was das Herz begehrt.
Lingo ist eine Systematik die es erlaubt, einzelne Bausteine mit begrenzter Funktion zu einen Netzwerk mit 
unbegrenzter Funktion zusammen zu bauen. Gebaut werden diese Netzwerk für Lingo in Konfigurationsdateien.
Ein kleines Beispiel: 

	<lingo>
		<attendee name='textreader' out='lines' files='README.txt'/>
		<attendee name='debugger' in='lines'/>
	</lingo>

Lingo wird angewiesen, zwei Attendees (Teilnehmer) einzuladen. Und Lingo möchte, dass sie miteinander sprechen. 
Daher kommt ja auch der Name Lingo (=die Fachsprache). 

Der erste Teilnehmer ist der *Textreader*. Er kann Dateien lesen und anderen Teilnehmern den Inhalt mitteilen.
Dazu wird dem *Textreader* der Ausgabekanal *lines* (out='lines') erzeugt. Alles, was der Textreader zu sagen hat, 
wird über diesen Kanal geschleust. Das war's fast für den *Textreader*. Der tut jetzt erst einmal nichts, bis Lingo den 
ersten Teilnehmer aufordern wird, zu reden. Dann öffnet der *Textreader* die Datei README.txt (files-Parameter)
und plappert den Inhalt über den *lines*-Kanal in die Welt hinaus. Der zweite Teilnehmer *debugger* macht nichts
anderes, als alles, was über seinen Eingabekanal herein kommt (in='lines'), auf der Konsole auszugeben. Schreibt man 
die obige Lingo-Konfiguration in die Datei README.XML und ruft anschließend <tt>ruby lingo.rb -c readme</tt> auf, 
so schaut das Ergebnis dieser ersten Lingo-Konfiguration in etwa so aus:

	<debug>:  CMD: FILE (README.txt)
	<debug>:  "= Lingo"
	<debug>:  "== Einf\374hrung"
	<debug>:  "Lingo ist linguistisches Lego. Sollen Texte einer linguistischen Analyse unterzogen werden, "
	<debug>:  "so kann man mit Lingo alles bewerkstelligen, was das Herz begehrt."
		 ....
	<debug>:  CMD: EOF (README.txt)
	
	----------------------------------------
	Die Dauer der Sitzung war  0.00 sec.

Was wir sehen, sind Zeilen mit CMD: und Zeilen ohne. Und das ist auch gut so! Lingo unterscheidet nämlich zwischen 
Kommando und Daten. Der *Textreader* hat nicht nur den Inhalt der Datei gelesen, sondern auch zusätzlich über die
Kommandos mitgeteilt, wann welche Datei anfängt und wann sie zuende ist. Dies kann (und wird) eine wichtige Information 
für andere Teilnehmer werden, die später hinzukommen.

So, damit ist zu Lingo eigentlich alles gesagt :o)

Vielleicht noch eine kleine Übersicht über mögliche Teilnehmer, die man zur Lösung seines speziellen Problems heranziehen 
kann (für weitere Informationen sei auf die jeweilige Dokumentation des Teilnehmers verwiesen):

<b>Textreader</b>::	Liest Dateien und gibt deren Inhalt zeilenweise in die Kanäle.
<b>Tokenizer</b>::		Zerlegt Zeilen in definierte Zeichenketten der Klasse Token.
<b>Stopworder</b>::	Markiert Token, die in der Stopwort-Liste enthalten sind, als Stopwort.
<b>Wordsearcher</b>::	Macht aus Token Objekte der Klasse Word. Ums richtig zu machen schaut er dabei noch in Wörterbücher, versucht Flexionen zu berücksichtigen und wenn alles nichts hilft, testet er auch noch auf Komposita.
<b>Synonymer</b>::	Erweitert Objekte der Klasse Word um Synonyme, die zu deren Grundform gefunden werden.
<b>Noneword_filter</b>::	Filtert alles raus und gibt nur unbekannte Wörter weiter.
<b>Vector_filter</b>::	Filtert alles raus und gibt nur die Zeichenketten weiter, die für die Indexierung als Vektor zu gebrauchen sind.
<b>Textwriter</b>::	Gibt alles, was er bekommt, in eine Datei aus.
<b>Debugger</b>::	Zeigt alles zur Fehleranalyse an.
<b>Ocr_variator</b>::	Versucht Fehler zu beheben, die durch das Einscannen von Texten entstehen können.

Weiterhin kann für den Einstieg nicht schaden, einen Blick in die Konfigurationen rubyling.xml und ocr.xml zu werfen.
