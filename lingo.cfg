#
#  Lingo-Konfiguration
#
---
meeting:
  protocol: '$(status)'
  attendees:
    - textreader:     { out: lines, files: '$(files)' }
    - tokenizer:      { in: lines, out: token }
    - abbreviator:    { in: token, out: abbrv, source: 'sys-abk' }
    - wordsearcher:   { in: abbrv, out: words, source: 'sys-dic', mode :'first' }
#    - dehyphenizer:   { in: words, out: hyphe, source: 'sys-dic' }
    - decomposer:     { in: words, out: comps, source: 'sys-dic' }
    - multiworder:    { in: comps, out: multi, stopper: 'PUNC,OTHR', source: 'sys-mul' }
    - sequencer:      { in: multi, out: sequ, stopper: 'PUNC,OTHR', source: 'sys-mul' }
    - synonymer:      { in: multi, out: split, skip: '?,t', source: 'sys-syn' }
    - debugger:       { in: split, eval: 'true', ceval: 'cmd!="EOL"', prompt: 'lex:) '}

    - noneword_filter: { in: split, out: nones }
# TODO: v1.60    - vector_filter:  { in: split, out: vector, lexicals: '[ksavem]' }
    - vector_filter:  { in: split, out: vector, lexicals: '^[ksavem]$' }
    - vector_filter:  { in: split, out: muls, lexicals: m }
    - vector_filter:  { in: split, out: seqs, lexicals: q }
    - vector_filter:  { in: split, out: syns, lexicals: y }

    - textwriter:     { in: nones, ext: non, sep: "\n" }
    - textwriter:     { in: vector, ext: vec, sep: "\n" }
    - textwriter:     { in: muls, ext: mul, sep: "\n" }
    - textwriter:     { in: seqs, ext: seq, sep: "\n" }
    - textwriter:     { in: syns, ext: syn, sep: "\n" }

    #    Fehleranalyse
#    - objectfilter:   { in: stop, out: words, objects: 'obj.form =~ /^[A-Z]/'  }
#    - debugger:       { in: split, eval: 'true', ceval: 'cmd!="EOL"', prompt: 'lex:) '}
